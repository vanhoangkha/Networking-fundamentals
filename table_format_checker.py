#!/usr/bin/env python3
"""
Script ki·ªÉm tra v√† s·ª≠a ƒë·ªãnh d·∫°ng b·∫£ng trong t√†i li·ªáu CCNA
ƒê·∫£m b·∫£o t·∫•t c·∫£ b·∫£ng tu√¢n th·ªß chu·∫©n markdown
"""

import os
import re
import glob
from pathlib import Path

class TableFormatChecker:
    def __init__(self):
        self.fixes_applied = []
        self.tables_found = 0
        self.tables_fixed = 0
        
    def detect_tables(self, content):
        """Ph√°t hi·ªán c√°c b·∫£ng trong n·ªôi dung"""
        lines = content.split('\n')
        tables = []
        current_table = []
        in_table = False
        
        for i, line in enumerate(lines):
            # Ph√°t hi·ªán d√≤ng c√≥ k√Ω t·ª± |
            if '|' in line and not line.strip().startswith('```'):
                if not in_table:
                    in_table = True
                    current_table = []
                current_table.append((i, line))
            else:
                if in_table and current_table:
                    tables.append(current_table)
                    current_table = []
                in_table = False
        
        # Th√™m b·∫£ng cu·ªëi n·∫øu c√≥
        if current_table:
            tables.append(current_table)
            
        return tables
    
    def fix_table_format(self, table_lines):
        """S·ª≠a ƒë·ªãnh d·∫°ng m·ªôt b·∫£ng"""
        if not table_lines:
            return table_lines
        
        fixed_lines = []
        
        for line_num, line in table_lines:
            original_line = line
            
            # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu cu·ªëi
            line = line.strip()
            
            # ƒê·∫£m b·∫£o b·∫£ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c b·∫±ng |
            if line and '|' in line:
                # T√°ch c√°c cell
                cells = line.split('|')
                
                # Lo·∫°i b·ªè cell tr·ªëng ·ªü ƒë·∫ßu v√† cu·ªëi n·∫øu c√≥
                if cells and cells[0].strip() == '':
                    cells = cells[1:]
                if cells and cells[-1].strip() == '':
                    cells = cells[:-1]
                
                # L√†m s·∫°ch t·ª´ng cell
                cleaned_cells = []
                for cell in cells:
                    cell = cell.strip()
                    cleaned_cells.append(cell)
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i d√≤ng separator kh√¥ng
                is_separator = all(re.match(r'^[-:\s]*$', cell) for cell in cleaned_cells if cell)
                
                if is_separator:
                    # T·∫°o separator chu·∫©n
                    separator_cells = []
                    for cell in cleaned_cells:
                        if cell:
                            if ':' in cell:
                                if cell.startswith(':') and cell.endswith(':'):
                                    separator_cells.append(':-------:')  # Center align
                                elif cell.endswith(':'):
                                    separator_cells.append('-------:')   # Right align
                                else:
                                    separator_cells.append(':-------')   # Left align
                            else:
                                separator_cells.append('-------')       # Default
                        else:
                            separator_cells.append('-------')
                    
                    line = '| ' + ' | '.join(separator_cells) + ' |'
                else:
                    # D√≤ng d·ªØ li·ªáu th∆∞·ªùng
                    line = '| ' + ' | '.join(cleaned_cells) + ' |'
                
                if line != original_line:
                    self.fixes_applied.append(f"D√≤ng {line_num + 1}: S·ª≠a format b·∫£ng")
            
            fixed_lines.append((line_num, line))
        
        return fixed_lines
    
    def fix_file_tables(self, file_path):
        """S·ª≠a t·∫•t c·∫£ b·∫£ng trong m·ªôt file"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            self.fixes_applied = []
            
            # Ph√°t hi·ªán b·∫£ng
            tables = self.detect_tables(content)
            self.tables_found += len(tables)
            
            if not tables:
                return {
                    'file': os.path.basename(file_path),
                    'tables_found': 0,
                    'tables_fixed': 0,
                    'fixes': [],
                    'changed': False
                }
            
            # S·ª≠a t·ª´ng b·∫£ng
            lines = content.split('\n')
            tables_fixed_count = 0
            
            for table in tables:
                fixed_table = self.fix_table_format(table)
                
                # Thay th·∫ø c√°c d√≤ng ƒë√£ s·ª≠a
                table_changed = False
                for (line_num, new_line), (orig_line_num, orig_line) in zip(fixed_table, table):
                    if new_line != orig_line:
                        lines[line_num] = new_line
                        table_changed = True
                
                if table_changed:
                    tables_fixed_count += 1
            
            self.tables_fixed += tables_fixed_count
            
            # T·∫°o n·ªôi dung m·ªõi
            new_content = '\n'.join(lines)
            
            # L∆∞u file n·∫øu c√≥ thay ƒë·ªïi
            if new_content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                return {
                    'file': os.path.basename(file_path),
                    'tables_found': len(tables),
                    'tables_fixed': tables_fixed_count,
                    'fixes': self.fixes_applied,
                    'changed': True
                }
            else:
                return {
                    'file': os.path.basename(file_path),
                    'tables_found': len(tables),
                    'tables_fixed': 0,
                    'fixes': [],
                    'changed': False
                }
                
        except Exception as e:
            return {
                'file': os.path.basename(file_path),
                'error': str(e),
                'changed': False
            }
    
    def validate_table_structure(self, table_lines):
        """Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng c√≥ h·ª£p l·ªá kh√¥ng"""
        if len(table_lines) < 2:
            return False, "B·∫£ng c·∫ßn √≠t nh·∫•t 2 d√≤ng (header + separator)"
        
        # Ki·ªÉm tra d√≤ng ƒë·∫ßu (header)
        header_line = table_lines[0][1]
        header_cells = len([cell for cell in header_line.split('|') if cell.strip()])
        
        # Ki·ªÉm tra d√≤ng th·ª© 2 (separator)
        separator_line = table_lines[1][1]
        separator_cells = len([cell for cell in separator_line.split('|') if cell.strip()])
        
        if header_cells != separator_cells:
            return False, f"S·ªë c·ªôt kh√¥ng kh·ªõp: header c√≥ {header_cells}, separator c√≥ {separator_cells}"
        
        # Ki·ªÉm tra c√°c d√≤ng d·ªØ li·ªáu
        for i, (line_num, line) in enumerate(table_lines[2:], 2):
            data_cells = len([cell for cell in line.split('|') if cell.strip()])
            if data_cells != header_cells:
                return False, f"D√≤ng {i+1} c√≥ {data_cells} c·ªôt, kh√°c v·ªõi header ({header_cells} c·ªôt)"
        
        return True, "C·∫•u tr√∫c b·∫£ng h·ª£p l·ªá"

def main():
    checker = TableFormatChecker()
    base_dir = "/home/ubuntu/NEO/Networking fundamentals"
    pattern = os.path.join(base_dir, "Day*.md")
    files = glob.glob(pattern)
    
    print("üìä KI·ªÇM TRA V√Ä S·ª¨A ƒê·ªäNH D·∫†NG B·∫¢NG")
    print("=" * 45)
    
    total_files = len(files)
    files_with_tables = 0
    files_fixed = 0
    
    results = []
    
    for file_path in sorted(files):
        result = checker.fix_file_tables(file_path)
        results.append(result)
        
        filename = result['file']
        
        if result.get('error'):
            print(f"‚ùå {filename}: L·ªói - {result['error']}")
        elif result.get('tables_found', 0) > 0:
            files_with_tables += 1
            tables_found = result.get('tables_found', 0)
            tables_fixed = result.get('tables_fixed', 0)
            
            if result.get('changed'):
                files_fixed += 1
                print(f"üîß {filename}: {tables_found} b·∫£ng, {tables_fixed} ƒë√£ s·ª≠a")
            else:
                print(f"‚úÖ {filename}: {tables_found} b·∫£ng, ƒë√£ chu·∫©n")
        else:
            print(f"‚ö™ {filename}: Kh√¥ng c√≥ b·∫£ng")
    
    # T·∫°o b√°o c√°o
    report_path = os.path.join(base_dir, "TABLE_FORMAT_REPORT.md")
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# B√ÅO C√ÅO KI·ªÇM TRA ƒê·ªäNH D·∫†NG B·∫¢NG\n\n")
        f.write(f"**Ng√†y ki·ªÉm tra**: {os.popen('date').read().strip()}\n\n")
        f.write("## T·ªïng k·∫øt\n\n")
        f.write(f"- **T·ªïng s·ªë file**: {total_files}\n")
        f.write(f"- **File c√≥ b·∫£ng**: {files_with_tables}\n")
        f.write(f"- **File ƒë√£ s·ª≠a**: {files_fixed}\n")
        f.write(f"- **T·ªïng b·∫£ng t√¨m th·∫•y**: {checker.tables_found}\n")
        f.write(f"- **T·ªïng b·∫£ng ƒë√£ s·ª≠a**: {checker.tables_fixed}\n\n")
        
        f.write("## Chi ti·∫øt t·ª´ng file\n\n")
        for result in results:
            f.write(f"### {result['file']}\n\n")
            
            if result.get('error'):
                f.write(f"‚ùå **L·ªói**: {result['error']}\n\n")
                continue
            
            tables_found = result.get('tables_found', 0)
            if tables_found == 0:
                f.write("‚ö™ Kh√¥ng c√≥ b·∫£ng\n\n")
                continue
            
            tables_fixed = result.get('tables_fixed', 0)
            f.write(f"**B·∫£ng t√¨m th·∫•y**: {tables_found}\n")
            f.write(f"**B·∫£ng ƒë√£ s·ª≠a**: {tables_fixed}\n")
            
            if result.get('fixes'):
                f.write("**Chi ti·∫øt s·ª≠a ch·ªØa:**\n")
                for fix in result['fixes'][:10]:  # Ch·ªâ hi·ªÉn th·ªã 10 fix ƒë·∫ßu
                    f.write(f"- {fix}\n")
                if len(result['fixes']) > 10:
                    f.write(f"- ... v√† {len(result['fixes']) - 10} s·ª≠a ch·ªØa kh√°c\n")
            else:
                f.write("‚úÖ T·∫•t c·∫£ b·∫£ng ƒë√£ ƒë√∫ng ƒë·ªãnh d·∫°ng\n")
            
            f.write("\n")
    
    print("\n" + "=" * 45)
    print("üìä T·ªîNG K·∫æT KI·ªÇM TRA B·∫¢NG:")
    print(f"‚úÖ ƒê√£ ki·ªÉm tra: {total_files} file")
    print(f"üìä File c√≥ b·∫£ng: {files_with_tables} file")
    print(f"üîß File ƒë√£ s·ª≠a: {files_fixed} file")
    print(f"üìã T·ªïng b·∫£ng: {checker.tables_found}")
    print(f"üõ†Ô∏è  B·∫£ng ƒë√£ s·ª≠a: {checker.tables_fixed}")
    print(f"üìÑ B√°o c√°o chi ti·∫øt: TABLE_FORMAT_REPORT.md")

if __name__ == "__main__":
    main()
