#!/usr/bin/env python3
"""
Script s·ª≠a l·ªói markdown ho√†n to√†n - kh√¥i ph·ª•c t·ª´ backup v√† format l·∫°i
"""

import os
import re
import glob
from pathlib import Path

def restore_and_fix_file(file_path):
    """Kh√¥i ph·ª•c t·ª´ backup v√† format l·∫°i ƒë√∫ng chu·∫©n"""
    backup_path = file_path + '.backup'
    
    if not os.path.exists(backup_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y backup cho {os.path.basename(file_path)}")
        return False
    
    try:
        # ƒê·ªçc file backup
        with open(backup_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # L·∫•y th√¥ng tin ng√†y t·ª´ t√™n file
        filename = os.path.basename(file_path)
        day_match = re.match(r'Day(\d+)_(.+)\.md', filename)
        if not day_match:
            return False
        
        day_num = day_match.group(1).zfill(2)
        title_raw = day_match.group(2).replace('_', ' ')
        
        # T·∫°o ti√™u ƒë·ªÅ chu·∫©n
        title = title_raw.upper()
        
        # X·ª≠ l√Ω n·ªôi dung
        lines = content.split('\n')
        processed_lines = []
        
        # Th√™m header chu·∫©n
        processed_lines.append(f"# NG√ÄY {day_num}: {title}")
        processed_lines.append("")
        
        section_num = 1
        subsection_num = 1
        
        for line in lines:
            # B·ªè qua header c≈©
            if line.startswith('# ') and any(x in line.lower() for x in ['ng√†y', 'day', str(int(day_num))]):
                continue
            
            # X·ª≠ l√Ω headers
            if line.startswith('##'):
                # Main section
                clean_title = re.sub(r'^#+\s*\d*\.?\d*\s*', '', line).strip()
                if clean_title:
                    processed_lines.append(f"## {day_num}.{section_num} {clean_title}")
                    section_num += 1
                    subsection_num = 1
            elif line.startswith('###'):
                # Subsection
                clean_title = re.sub(r'^#+\s*\d*\.?\d*\.?\d*\s*', '', line).strip()
                if clean_title:
                    processed_lines.append(f"### {day_num}.{section_num-1}.{subsection_num} {clean_title}")
                    subsection_num += 1
            else:
                # X·ª≠ l√Ω n·ªôi dung th∆∞·ªùng
                # S·ª≠a bullet points
                if re.match(r'^\s*[‚Ä¢*-]\s*', line):
                    line = re.sub(r'^\s*[‚Ä¢*-]\s*', '- ', line)
                
                # S·ª≠a bold text
                line = re.sub(r'\*\*([^*]+?)\s*:\s*\*\*', r'**\1:**', line)
                
                # S·ª≠a links
                line = line.replace('HTTPS://', 'https://')
                
                processed_lines.append(line)
        
        # Lo·∫°i b·ªè d√≤ng tr·ªëng th·ª´a
        final_lines = []
        prev_empty = False
        
        for line in processed_lines:
            if line.strip() == '':
                if not prev_empty:
                    final_lines.append('')
                prev_empty = True
            else:
                final_lines.append(line)
                prev_empty = False
        
        # Ghi file m·ªõi
        final_content = '\n'.join(final_lines)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(final_content)
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω {filename}: {e}")
        return False

def main():
    base_dir = "/home/ubuntu/NEO/Networking fundamentals"
    pattern = os.path.join(base_dir, "Day*.md")
    files = glob.glob(pattern)
    
    print("üîÑ KH√îI PH·ª§C V√Ä S·ª¨A L·ªñI MARKDOWN HO√ÄN TO√ÄN")
    print("=" * 50)
    
    success_count = 0
    for file_path in sorted(files):
        filename = os.path.basename(file_path)
        if restore_and_fix_file(file_path):
            success_count += 1
            print(f"‚úÖ {filename}")
        else:
            print(f"‚ùå {filename}")
    
    print(f"\nüéâ Ho√†n th√†nh! ƒê√£ s·ª≠a {success_count}/{len(files)} file")

if __name__ == "__main__":
    main()
