#!/usr/bin/env python3
"""
Script ki·ªÉm tra vƒÉn phong n√¢ng cao cho t√†i li·ªáu CCNA
ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n v√† chuy√™n nghi·ªáp trong vƒÉn b·∫£n
"""

import os
import re
import glob
from pathlib import Path

class AdvancedStyleChecker:
    def __init__(self):
        # Quy t·∫Øc vƒÉn phong n√¢ng cao
        self.style_improvements = {
            # C·∫£i thi·ªán c√°ch di·ªÖn ƒë·∫°t
            "c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng": "c√≥ th·ªÉ s·ª≠ d·ª•ng",
            "ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ": "d√πng ƒë·ªÉ",
            "c√≥ kh·∫£ nƒÉng": "c√≥ th·ªÉ",
            "th·ª±c hi·ªán vi·ªác": "th·ª±c hi·ªán",
            "ti·∫øn h√†nh": "th·ª±c hi·ªán",
            "ƒë·∫£m b·∫£o r·∫±ng": "ƒë·∫£m b·∫£o",
            "ch·∫Øc ch·∫Øn r·∫±ng": "ƒë·∫£m b·∫£o",
            "trong tr∆∞·ªùng h·ª£p m√†": "khi",
            "trong tr∆∞·ªùng h·ª£p": "khi",
            "b·ªüi v√¨": "v√¨",
            "do ƒë√≥ m√†": "do ƒë√≥",
            "v√¨ v·∫≠y m√†": "v√¨ v·∫≠y",
            "tuy nhi√™n": "nh∆∞ng",
            "m·∫∑c d√π v·∫≠y": "tuy v·∫≠y",
            "ngo√†i ra": "b√™n c·∫°nh ƒë√≥",
            
            # Chu·∫©n h√≥a thu·∫≠t ng·ªØ k·ªπ thu·∫≠t
            "ƒë·ªãa ch·ªâ ip": "ƒë·ªãa ch·ªâ IP",
            "giao th·ª©c tcp": "giao th·ª©c TCP",
            "giao th·ª©c udp": "giao th·ª©c UDP",
            "m√¥ h√¨nh osi": "m√¥ h√¨nh OSI",
            "ethernet": "Ethernet",
            "internet": "Internet",
            "wifi": "Wi-Fi",
            "bluetooth": "Bluetooth",
            
            # C·∫£i thi·ªán c√°ch vi·∫øt s·ªë v√† ƒë∆°n v·ªã
            "1 byte": "1 byte",
            "2 byte": "2 byte",
            "8 bit": "8 bit",
            "16 bit": "16 bit",
            "32 bit": "32 bit",
            "64 bit": "64 bit",
            
            # Chu·∫©n h√≥a d·∫•u c√¢u
            " ,": ",",
            " .": ".",
            " :": ":",
            " ;": ";",
            "( ": "(",
            " )": ")",
            "[ ": "[",
            " ]": "]",
            "{ ": "{",
            " }": "}",
        }
        
        # Quy t·∫Øc format ƒë·∫∑c bi·ªát
        self.format_rules = [
            # Chu·∫©n h√≥a bullet points
            (r'^‚Ä¢\s*', '- '),
            (r'^-\s+', '- '),
            (r'^\*\s+', '- '),
            
            # Chu·∫©n h√≥a heading
            (r'^#{1,6}\s*(.+)', lambda m: '#' * len(m.group(0).split()[0]) + ' ' + ' '.join(m.group(0).split()[1:])),
            
            # Chu·∫©n h√≥a code blocks
            (r'`([^`\n]+)`', r'`\1`'),
            
            # Chu·∫©n h√≥a emphasis
            (r'\*\*([^*]+)\*\*', r'**\1**'),
            (r'\*([^*]+)\*', r'*\1*'),
            
            # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
            (r'\s+', ' '),
            (r'^\s+|\s+$', ''),
        ]
        
        # T·ª´ kh√≥a c·∫ßn vi·∫øt hoa nh·∫•t qu√°n
        self.technical_terms = {
            'cisco': 'Cisco',
            'ieee': 'IEEE',
            'iso': 'ISO',
            'ietf': 'IETF',
            'rfc': 'RFC',
            'tcp': 'TCP',
            'udp': 'UDP',
            'ip': 'IP',
            'ipv4': 'IPv4',
            'ipv6': 'IPv6',
            'http': 'HTTP',
            'https': 'HTTPS',
            'ftp': 'FTP',
            'tftp': 'TFTP',
            'ssh': 'SSH',
            'telnet': 'Telnet',
            'snmp': 'SNMP',
            'dhcp': 'DHCP',
            'dns': 'DNS',
            'vlan': 'VLAN',
            'stp': 'STP',
            'rstp': 'RSTP',
            'ospf': 'OSPF',
            'eigrp': 'EIGRP',
            'rip': 'RIP',
            'bgp': 'BGP',
            'nat': 'NAT',
            'pat': 'PAT',
            'acl': 'ACL',
            'qos': 'QoS',
            'vpn': 'VPN',
            'mpls': 'MPLS',
            'hsrp': 'HSRP',
            'vrrp': 'VRRP',
            'glbp': 'GLBP',
            'etherchannel': 'EtherChannel',
            'poe': 'PoE',
            'cdp': 'CDP',
            'lldp': 'LLDP',
            'ntp': 'NTP',
            'syslog': 'SYSLOG',
            'aaa': 'AAA',
            'radius': 'RADIUS',
            'tacacs': 'TACACS',
            'wpa': 'WPA',
            'wep': 'WEP',
            'wpa2': 'WPA2',
            'wpa3': 'WPA3',
            'ssid': 'SSID',
            'bssid': 'BSSID',
            'ess': 'ESS',
            'bss': 'BSS',
            'lan': 'LAN',
            'wan': 'WAN',
            'man': 'MAN',
            'pan': 'PAN',
            'cli': 'CLI',
            'gui': 'GUI',
            'api': 'API',
            'rest': 'REST',
            'json': 'JSON',
            'xml': 'XML',
            'yaml': 'YAML',
            'sql': 'SQL',
            'html': 'HTML',
            'css': 'CSS',
            'javascript': 'JavaScript',
            'python': 'Python',
            'ansible': 'Ansible',
            'puppet': 'Puppet',
            'chef': 'Chef',
            'docker': 'Docker',
            'kubernetes': 'Kubernetes',
            'vmware': 'VMware',
            'aws': 'AWS',
            'azure': 'Azure',
            'gcp': 'GCP',
        }

    def improve_style(self, text):
        """C·∫£i thi·ªán vƒÉn phong t·ªïng th·ªÉ"""
        improved_text = text
        changes_made = []
        
        # √Åp d·ª•ng c·∫£i thi·ªán vƒÉn phong
        for old_phrase, new_phrase in self.style_improvements.items():
            if old_phrase in improved_text:
                improved_text = improved_text.replace(old_phrase, new_phrase)
                changes_made.append(f"'{old_phrase}' ‚Üí '{new_phrase}'")
        
        # √Åp d·ª•ng quy t·∫Øc format
        for pattern, replacement in self.format_rules:
            if callable(replacement):
                improved_text = re.sub(pattern, replacement, improved_text, flags=re.MULTILINE)
            else:
                improved_text = re.sub(pattern, replacement, improved_text, flags=re.MULTILINE)
        
        # Chu·∫©n h√≥a thu·∫≠t ng·ªØ k·ªπ thu·∫≠t
        for term_lower, term_correct in self.technical_terms.items():
            pattern = r'\b' + re.escape(term_lower) + r'\b'
            if re.search(pattern, improved_text, re.IGNORECASE):
                improved_text = re.sub(pattern, term_correct, improved_text, flags=re.IGNORECASE)
                changes_made.append(f"'{term_lower}' ‚Üí '{term_correct}'")
        
        return improved_text, changes_made

    def check_consistency(self, text):
        """Ki·ªÉm tra t√≠nh nh·∫•t qu√°n"""
        issues = []
        
        lines = text.split('\n')
        
        # Ki·ªÉm tra format heading
        for i, line in enumerate(lines, 1):
            if line.startswith('#'):
                # Ki·ªÉm tra space sau #
                if not re.match(r'^#+\s+', line):
                    issues.append(f"D√≤ng {i}: Thi·∫øu kho·∫£ng tr·∫Øng sau d·∫•u # trong heading")
                
                # Ki·ªÉm tra vi·∫øt hoa heading
                heading_text = re.sub(r'^#+\s*', '', line)
                if heading_text and not heading_text[0].isupper():
                    issues.append(f"D√≤ng {i}: Heading n√™n b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ hoa")
        
        # Ki·ªÉm tra bullet points
        bullet_styles = set()
        for line in lines:
            if re.match(r'^\s*[-*‚Ä¢]\s', line):
                bullet_char = re.match(r'^\s*([-*‚Ä¢])', line).group(1)
                bullet_styles.add(bullet_char)
        
        if len(bullet_styles) > 1:
            issues.append(f"Kh√¥ng nh·∫•t qu√°n trong bullet points: {bullet_styles}")
        
        return issues

    def process_file(self, file_path):
        """X·ª≠ l√Ω m·ªôt file"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # C·∫£i thi·ªán vƒÉn phong
            content, style_changes = self.improve_style(content)
            
            # Ki·ªÉm tra t√≠nh nh·∫•t qu√°n
            consistency_issues = self.check_consistency(content)
            
            # L∆∞u file n·∫øu c√≥ thay ƒë·ªïi
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
            
            return {
                'file': os.path.basename(file_path),
                'style_changes': style_changes,
                'consistency_issues': consistency_issues,
                'changed': content != original_content
            }
            
        except Exception as e:
            return {
                'file': os.path.basename(file_path),
                'error': str(e),
                'changed': False
            }

def main():
    checker = AdvancedStyleChecker()
    base_dir = "/home/ubuntu/NEO/Networking fundamentals"
    pattern = os.path.join(base_dir, "Day*.md")
    files = glob.glob(pattern)
    
    print("üé® KI·ªÇM TRA VƒÇN PHONG N√ÇNG CAO")
    print("=" * 50)
    
    total_files = len(files)
    files_changed = 0
    total_style_changes = 0
    total_consistency_issues = 0
    
    results = []
    
    for file_path in sorted(files):
        result = checker.process_file(file_path)
        results.append(result)
        
        if result.get('changed'):
            files_changed += 1
        
        if result.get('style_changes'):
            total_style_changes += len(result['style_changes'])
            print(f"üé® {result['file']}: {len(result['style_changes'])} c·∫£i thi·ªán vƒÉn phong")
        
        if result.get('consistency_issues'):
            total_consistency_issues += len(result['consistency_issues'])
            print(f"‚ö†Ô∏è  {result['file']}: {len(result['consistency_issues'])} v·∫•n ƒë·ªÅ nh·∫•t qu√°n")
        
        if result.get('error'):
            print(f"‚ùå {result['file']}: L·ªói - {result['error']}")
        elif not result.get('style_changes') and not result.get('consistency_issues'):
            print(f"‚úÖ {result['file']}: Ho√†n h·∫£o")
    
    # T·∫°o b√°o c√°o
    report_path = os.path.join(base_dir, "ADVANCED_STYLE_REPORT.md")
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# B√ÅO C√ÅO KI·ªÇM TRA VƒÇN PHONG N√ÇNG CAO\n\n")
        f.write(f"**Ng√†y ki·ªÉm tra**: {os.popen('date').read().strip()}\n\n")
        f.write("## T·ªïng k·∫øt\n\n")
        f.write(f"- **T·ªïng s·ªë file**: {total_files}\n")
        f.write(f"- **File ƒë√£ c·∫£i thi·ªán**: {files_changed}\n")
        f.write(f"- **T·ªïng c·∫£i thi·ªán vƒÉn phong**: {total_style_changes}\n")
        f.write(f"- **T·ªïng v·∫•n ƒë·ªÅ nh·∫•t qu√°n**: {total_consistency_issues}\n\n")
        
        if total_style_changes > 0:
            f.write("## Chi ti·∫øt c·∫£i thi·ªán vƒÉn phong\n\n")
            for result in results:
                if result.get('style_changes'):
                    f.write(f"### {result['file']}\n\n")
                    for change in result['style_changes'][:10]:  # Ch·ªâ hi·ªÉn th·ªã 10 thay ƒë·ªïi ƒë·∫ßu
                        f.write(f"- {change}\n")
                    if len(result['style_changes']) > 10:
                        f.write(f"- ... v√† {len(result['style_changes']) - 10} thay ƒë·ªïi kh√°c\n")
                    f.write("\n")
        
        if total_consistency_issues > 0:
            f.write("## V·∫•n ƒë·ªÅ nh·∫•t qu√°n c·∫ßn ch√∫ √Ω\n\n")
            for result in results:
                if result.get('consistency_issues'):
                    f.write(f"### {result['file']}\n\n")
                    for issue in result['consistency_issues']:
                        f.write(f"- {issue}\n")
                    f.write("\n")
    
    print("\n" + "=" * 50)
    print("üìä T·ªîNG K·∫æT VƒÇN PHONG N√ÇNG CAO:")
    print(f"‚úÖ ƒê√£ ki·ªÉm tra: {total_files} file")
    print(f"üé® ƒê√£ c·∫£i thi·ªán: {files_changed} file")
    print(f"‚úèÔ∏è  C·∫£i thi·ªán vƒÉn phong: {total_style_changes}")
    print(f"‚ö†Ô∏è  V·∫•n ƒë·ªÅ nh·∫•t qu√°n: {total_consistency_issues}")
    print(f"üìã B√°o c√°o chi ti·∫øt: ADVANCED_STYLE_REPORT.md")

if __name__ == "__main__":
    main()
