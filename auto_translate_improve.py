#!/usr/bin/env python3
"""
Script t·ª± ƒë·ªông c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng d·ªãch thu·∫≠t cho t√†i li·ªáu CCNA
Chu·∫©n h√≥a thu·∫≠t ng·ªØ k·ªπ thu·∫≠t v√† ƒë·ªãnh d·∫°ng theo chu·∫©n t√†i li·ªáu ƒë√†o t·∫°o
"""

import os
import re
import glob
from pathlib import Path

class CCNATranslationImprover:
    def __init__(self, base_dir):
        self.base_dir = Path(base_dir)
        self.processed_files = []
        
        # T·ª´ ƒëi·ªÉn thu·∫≠t ng·ªØ chu·∫©n h√≥a
        self.terminology_dict = {
            # Thi·∫øt b·ªã m·∫°ng
            "switch": "switch",
            "router": "router", 
            "firewall": "t∆∞·ªùng l·ª≠a",
            "hub": "hub",
            
            # Giao th·ª©c
            "TCP": "TCP",
            "UDP": "UDP", 
            "IP": "IP",
            "HTTP": "HTTP",
            "HTTPS": "HTTPS",
            "FTP": "FTP",
            "SMTP": "SMTP",
            "DNS": "DNS",
            "DHCP": "DHCP",
            
            # M√¥ h√¨nh OSI
            "Physical Layer": "T·∫ßng V·∫≠t l√Ω",
            "Data Link Layer": "T·∫ßng Li√™n k·∫øt d·ªØ li·ªáu", 
            "Network Layer": "T·∫ßng M·∫°ng",
            "Transport Layer": "T·∫ßng V·∫≠n chuy·ªÉn",
            "Session Layer": "T·∫ßng Phi√™n",
            "Presentation Layer": "T·∫ßng Tr√¨nh b√†y",
            "Application Layer": "T·∫ßng ·ª®ng d·ª•ng",
            
            # C√°c kh√°i ni·ªám m·∫°ng
            "LAN": "LAN (Local Area Network)",
            "WAN": "WAN (Wide Area Network)",
            "VLAN": "VLAN",
            "subnet": "m·∫°ng con",
            "subnetting": "chia m·∫°ng con",
            "routing": "ƒë·ªãnh tuy·∫øn",
            "switching": "chuy·ªÉn m·∫°ch",
            
            # C√°p v√† k·∫øt n·ªëi
            "UTP": "UTP (Unshielded Twisted Pair)",
            "STP": "STP (Shielded Twisted Pair)",
            "fiber optic": "c√°p quang",
            "ethernet": "Ethernet",
            
            # CLI v√† c·∫•u h√¨nh
            "CLI": "CLI (Command Line Interface)",
            "GUI": "GUI (Graphical User Interface)",
            "running-config": "running-config",
            "startup-config": "startup-config",
        }
        
    def improve_file_structure(self, content, day_number, title):
        """C·∫£i thi·ªán c·∫•u tr√∫c file theo chu·∫©n t√†i li·ªáu ƒë√†o t·∫°o"""
        
        # T·∫°o header chu·∫©n
        header = f"# NG√ÄY {day_number}: {title.upper()}\n\n"
        
        # X·ª≠ l√Ω n·ªôi dung
        lines = content.split('\n')
        improved_lines = []
        section_counter = 1
        subsection_counter = 1
        
        for line in lines:
            # B·ªè qua header c≈©
            if line.startswith('# ') and any(x in line.lower() for x in ['ng√†y', 'day']):
                continue
                
            # C·∫£i thi·ªán heading structure
            if line.startswith('##'):
                line = f"## {day_number}.{section_counter} " + line[2:].strip()
                section_counter += 1
                subsection_counter = 1
            elif line.startswith('###'):
                line = f"### {day_number}.{section_counter-1}.{subsection_counter} " + line[3:].strip()
                subsection_counter += 1
                
            # C·∫£i thi·ªán formatting
            line = self.improve_formatting(line)
            improved_lines.append(line)
            
        return header + '\n'.join(improved_lines)
    
    def improve_formatting(self, line):
        """C·∫£i thi·ªán ƒë·ªãnh d·∫°ng vƒÉn b·∫£n"""
        
        # Chu·∫©n h√≥a thu·∫≠t ng·ªØ
        for en_term, vi_term in self.terminology_dict.items():
            line = re.sub(rf'\b{re.escape(en_term)}\b', vi_term, line, flags=re.IGNORECASE)
            
        # C·∫£i thi·ªán bullet points
        if line.strip().startswith('-'):
            line = line.replace('-', '‚Ä¢', 1)
            
        # C·∫£i thi·ªán emphasis
        line = re.sub(r'\*\*(.*?)\*\*', r'**\1**', line)  # Bold
        line = re.sub(r'\*(.*?)\*', r'*\1*', line)        # Italic
        
        # C·∫£i thi·ªán code blocks
        if '`' in line and not line.strip().startswith('```'):
            line = re.sub(r'`([^`]+)`', r'`\1`', line)
            
        return line
    
    def extract_day_info(self, filename):
        """Tr√≠ch xu·∫•t th√¥ng tin ng√†y v√† ti√™u ƒë·ªÅ t·ª´ t√™n file"""
        match = re.match(r'Day(\d+)_(.+)\.md', filename)
        if match:
            day_num = match.group(1).zfill(2)
            title = match.group(2).replace('_', ' ')
            return day_num, title
        return None, None
    
    def process_file(self, file_path):
        """X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            filename = os.path.basename(file_path)
            day_num, title = self.extract_day_info(filename)
            
            if not day_num or not title:
                print(f"Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin ng√†y cho file: {filename}")
                return False
                
            # C·∫£i thi·ªán n·ªôi dung
            improved_content = self.improve_file_structure(content, day_num, title)
            
            # T·∫°o backup
            backup_path = file_path + '.backup'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
            # Ghi file ƒë√£ c·∫£i thi·ªán
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(improved_content)
                
            self.processed_files.append(filename)
            print(f"‚úÖ ƒê√£ c·∫£i thi·ªán: {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {filename}: {str(e)}")
            return False
    
    def process_all_files(self):
        """X·ª≠ l√Ω t·∫•t c·∫£ c√°c file Day*.md"""
        pattern = str(self.base_dir / "Day*.md")
        files = glob.glob(pattern)
        files.sort()
        
        print(f"T√¨m th·∫•y {len(files)} file c·∫ßn x·ª≠ l√Ω...")
        
        success_count = 0
        for file_path in files:
            if self.process_file(file_path):
                success_count += 1
                
        print(f"\nüìä K·∫øt qu·∫£:")
        print(f"‚úÖ Th√†nh c√¥ng: {success_count}/{len(files)} file")
        print(f"üìù Danh s√°ch file ƒë√£ x·ª≠ l√Ω:")
        for filename in self.processed_files:
            print(f"   - {filename}")
            
    def create_progress_report(self):
        """T·∫°o b√°o c√°o ti·∫øn ƒë·ªô"""
        report_path = self.base_dir / "TRANSLATION_PROGRESS.md"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("# B√ÅO C√ÅO TI·∫æN ƒê·ªò D·ªäCH THU·∫¨T V√Ä C·∫¢I THI·ªÜN\n\n")
            f.write(f"**Ng√†y c·∫≠p nh·∫≠t**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"**T·ªïng s·ªë file ƒë√£ x·ª≠ l√Ω**: {len(self.processed_files)}\n\n")
            f.write("## Danh s√°ch file ƒë√£ c·∫£i thi·ªán:\n\n")
            
            for i, filename in enumerate(self.processed_files, 1):
                f.write(f"{i}. {filename}\n")
                
            f.write("\n## C√°c c·∫£i thi·ªán ƒë√£ th·ª±c hi·ªán:\n\n")
            f.write("- ‚úÖ Chu·∫©n h√≥a c·∫•u tr√∫c ti√™u ƒë·ªÅ\n")
            f.write("- ‚úÖ C·∫£i thi·ªán ƒë·ªãnh d·∫°ng vƒÉn b·∫£n\n") 
            f.write("- ‚úÖ Chu·∫©n h√≥a thu·∫≠t ng·ªØ k·ªπ thu·∫≠t\n")
            f.write("- ‚úÖ T·ªëi ∆∞u h√≥a b·ªë c·ª•c n·ªôi dung\n")
            f.write("- ‚úÖ T·∫°o backup cho t·∫•t c·∫£ file g·ªëc\n")

if __name__ == "__main__":
    import datetime
    
    # Kh·ªüi t·∫°o v√† ch·∫°y
    base_directory = "/home/ubuntu/NEO/Networking fundamentals"
    improver = CCNATranslationImprover(base_directory)
    
    print("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫£i thi·ªán t√†i li·ªáu CCNA...")
    print("=" * 50)
    
    improver.process_all_files()
    improver.create_progress_report()
    
    print("\nüéâ Ho√†n th√†nh qu√° tr√¨nh c·∫£i thi·ªán!")
    print("üìã ƒê√£ t·∫°o b√°o c√°o ti·∫øn ƒë·ªô: TRANSLATION_PROGRESS.md")
