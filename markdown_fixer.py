#!/usr/bin/env python3
"""
Script s·ª≠a l·ªói ƒë·ªãnh d·∫°ng markdown cho t√†i li·ªáu CCNA
ƒê·∫£m b·∫£o markdown syntax ƒë√∫ng chu·∫©n
"""

import os
import re
import glob
from pathlib import Path

class MarkdownFixer:
    def __init__(self):
        self.fixes_applied = []
        
    def fix_headers(self, content):
        """S·ª≠a l·ªói headers markdown"""
        lines = content.split('\n')
        fixed_lines = []
        
        for line in lines:
            original_line = line
            
            # S·ª≠a headers kh√¥ng c√≥ space sau #
            if re.match(r'^#+[^#\s]', line):
                line = re.sub(r'^(#+)([^#\s])', r'\1 \2', line)
                self.fixes_applied.append(f"Header spacing: '{original_line}' ‚Üí '{line}'")
            
            # S·ª≠a headers tr√πng l·∫∑p ho·∫∑c sai format
            if re.match(r'^## \d+\.\d+ (.+)', line):
                match = re.match(r'^## \d+\.\d+ (.+)', line)
                if match:
                    line = f"## {match.group(1)}"
                    self.fixes_applied.append(f"Header format: '{original_line}' ‚Üí '{line}'")
            
            # S·ª≠a headers v·ªõi s·ªë th·ª´a
            if re.match(r'^### \d+\.\d+\.\d+ (.+)', line):
                match = re.match(r'^### \d+\.\d+\.\d+ (.+)', line)
                if match:
                    line = f"### {match.group(1)}"
                    self.fixes_applied.append(f"Subheader format: '{original_line}' ‚Üí '{line}'")
            
            fixed_lines.append(line)
        
        return '\n'.join(fixed_lines)
    
    def fix_lists(self, content):
        """S·ª≠a l·ªói lists markdown"""
        lines = content.split('\n')
        fixed_lines = []
        
        for line in lines:
            original_line = line
            
            # Chu·∫©n h√≥a bullet points
            if re.match(r'^\s*[‚Ä¢*]\s*', line):
                # Thay th·∫ø bullet points th√†nh d·∫•u g·∫°ch ngang
                line = re.sub(r'^\s*[‚Ä¢*]\s*', '- ', line)
                self.fixes_applied.append(f"Bullet point: '{original_line}' ‚Üí '{line}'")
            
            # S·ª≠a spacing trong lists
            if re.match(r'^-\s{2,}', line):
                line = re.sub(r'^-\s{2,}', '- ', line)
                self.fixes_applied.append(f"List spacing: '{original_line}' ‚Üí '{line}'")
            
            fixed_lines.append(line)
        
        return '\n'.join(fixed_lines)
    
    def fix_emphasis(self, content):
        """S·ª≠a l·ªói emphasis (bold, italic)"""
        original_content = content
        
        # S·ª≠a bold text
        content = re.sub(r'\*\*([^*]+?)\s*:\s*\*\*', r'**\1:**', content)
        
        # S·ª≠a italic text
        content = re.sub(r'\*([^*]+?)\*', r'*\1*', content)
        
        # S·ª≠a code inline
        content = re.sub(r'`([^`]+?)`', r'`\1`', content)
        
        if content != original_content:
            self.fixes_applied.append("Fixed emphasis formatting")
        
        return content
    
    def fix_links_images(self, content):
        """S·ª≠a l·ªói links v√† images"""
        original_content = content
        
        # S·ª≠a image links
        content = re.sub(r'!\[image\]\(HTTPS://', r'![image](https://', content)
        
        # S·ª≠a broken links
        content = re.sub(r'\[([^\]]+)\]\(\s*([^)]+)\s*\)', r'[\1](\2)', content)
        
        if content != original_content:
            self.fixes_applied.append("Fixed links and images")
        
        return content
    
    def fix_tables(self, content):
        """S·ª≠a l·ªói tables markdown"""
        lines = content.split('\n')
        fixed_lines = []
        in_table = False
        
        for i, line in enumerate(lines):
            original_line = line
            
            # Detect table
            if '|' in line and not line.strip().startswith('```'):
                in_table = True
                
                # S·ª≠a table formatting
                if re.match(r'^\s*\|.*\|\s*$', line):
                    # ƒê·∫£m b·∫£o c√≥ space quanh |
                    line = re.sub(r'\s*\|\s*', ' | ', line)
                    line = line.strip()
                    
                    # ƒê·∫£m b·∫£o b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c b·∫±ng |
                    if not line.startswith('|'):
                        line = '| ' + line
                    if not line.endswith('|'):
                        line = line + ' |'
                    
                    if line != original_line:
                        self.fixes_applied.append(f"Table format: '{original_line}' ‚Üí '{line}'")
                
                # S·ª≠a table separator
                elif re.match(r'^\s*\|[\s\-\|]+\|\s*$', line):
                    parts = line.split('|')
                    separator_parts = []
                    for part in parts:
                        if part.strip():
                            if '-' in part:
                                separator_parts.append('-------')
                            else:
                                separator_parts.append('')
                    
                    if separator_parts:
                        line = '| ' + ' | '.join(separator_parts) + ' |'
                        if line != original_line:
                            self.fixes_applied.append(f"Table separator: '{original_line}' ‚Üí '{line}'")
            else:
                in_table = False
            
            fixed_lines.append(line)
        
        return '\n'.join(fixed_lines)
    
    def fix_code_blocks(self, content):
        """S·ª≠a l·ªói code blocks"""
        original_content = content
        
        # S·ª≠a code blocks kh√¥ng ƒë√≥ng
        content = re.sub(r'^```([^`\n]*)\n(.*?)\n```', r'```\1\n\2\n```', content, flags=re.MULTILINE | re.DOTALL)
        
        if content != original_content:
            self.fixes_applied.append("Fixed code blocks")
        
        return content
    
    def fix_spacing(self, content):
        """S·ª≠a l·ªói spacing"""
        lines = content.split('\n')
        fixed_lines = []
        prev_empty = False
        
        for line in lines:
            # Lo·∫°i b·ªè trailing spaces
            line = line.rstrip()
            
            # Ki·ªÉm so√°t empty lines
            if line.strip() == '':
                if not prev_empty:
                    fixed_lines.append('')
                prev_empty = True
            else:
                fixed_lines.append(line)
                prev_empty = False
        
        # Lo·∫°i b·ªè empty lines ·ªü cu·ªëi
        while fixed_lines and fixed_lines[-1] == '':
            fixed_lines.pop()
        
        result = '\n'.join(fixed_lines)
        
        if result != content:
            self.fixes_applied.append("Fixed spacing and empty lines")
        
        return result
    
    def fix_file(self, file_path):
        """S·ª≠a m·ªôt file markdown"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            self.fixes_applied = []
            
            # √Åp d·ª•ng c√°c fixes
            content = self.fix_headers(content)
            content = self.fix_lists(content)
            content = self.fix_emphasis(content)
            content = self.fix_links_images(content)
            content = self.fix_tables(content)
            content = self.fix_code_blocks(content)
            content = self.fix_spacing(content)
            
            # L∆∞u file n·∫øu c√≥ thay ƒë·ªïi
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                return {
                    'file': os.path.basename(file_path),
                    'fixes': self.fixes_applied,
                    'changed': True
                }
            else:
                return {
                    'file': os.path.basename(file_path),
                    'fixes': [],
                    'changed': False
                }
                
        except Exception as e:
            return {
                'file': os.path.basename(file_path),
                'error': str(e),
                'changed': False
            }

def main():
    fixer = MarkdownFixer()
    base_dir = "/home/ubuntu/NEO/Networking fundamentals"
    pattern = os.path.join(base_dir, "Day*.md")
    files = glob.glob(pattern)
    
    print("üîß S·ª¨A L·ªñI ƒê·ªäNH D·∫†NG MARKDOWN")
    print("=" * 40)
    
    total_files = len(files)
    files_fixed = 0
    total_fixes = 0
    
    results = []
    
    for file_path in sorted(files):
        result = fixer.fix_file(file_path)
        results.append(result)
        
        if result.get('changed'):
            files_fixed += 1
            fix_count = len(result.get('fixes', []))
            total_fixes += fix_count
            print(f"üîß {result['file']}: {fix_count} l·ªói ƒë√£ s·ª≠a")
            
            # Hi·ªÉn th·ªã m·ªôt v√†i fixes ƒë·∫ßu ti√™n
            for fix in result.get('fixes', [])[:3]:
                print(f"   - {fix}")
            if len(result.get('fixes', [])) > 3:
                print(f"   - ... v√† {len(result.get('fixes', [])) - 3} l·ªói kh√°c")
        
        elif result.get('error'):
            print(f"‚ùå {result['file']}: L·ªói - {result['error']}")
        else:
            print(f"‚úÖ {result['file']}: Markdown ƒë√£ chu·∫©n")
    
    # T·∫°o b√°o c√°o
    report_path = os.path.join(base_dir, "MARKDOWN_FIX_REPORT.md")
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# B√ÅO C√ÅO S·ª¨A L·ªñI MARKDOWN\n\n")
        f.write(f"**Ng√†y s·ª≠a**: {os.popen('date').read().strip()}\n\n")
        f.write("## T·ªïng k·∫øt\n\n")
        f.write(f"- **T·ªïng s·ªë file**: {total_files}\n")
        f.write(f"- **File ƒë√£ s·ª≠a**: {files_fixed}\n")
        f.write(f"- **T·ªïng l·ªói ƒë√£ s·ª≠a**: {total_fixes}\n\n")
        
        f.write("## Chi ti·∫øt t·ª´ng file\n\n")
        for result in results:
            f.write(f"### {result['file']}\n\n")
            
            if result.get('error'):
                f.write(f"‚ùå **L·ªói**: {result['error']}\n\n")
                continue
            
            if result.get('fixes'):
                f.write("**L·ªói ƒë√£ s·ª≠a:**\n")
                for fix in result['fixes']:
                    f.write(f"- {fix}\n")
                f.write("\n")
            else:
                f.write("‚úÖ Markdown ƒë√£ chu·∫©n\n\n")
    
    print("\n" + "=" * 40)
    print("üìä T·ªîNG K·∫æT S·ª¨A L·ªñI MARKDOWN:")
    print(f"‚úÖ ƒê√£ ki·ªÉm tra: {total_files} file")
    print(f"üîß ƒê√£ s·ª≠a: {files_fixed} file")
    print(f"üõ†Ô∏è  T·ªïng l·ªói ƒë√£ s·ª≠a: {total_fixes}")
    print(f"üìã B√°o c√°o chi ti·∫øt: MARKDOWN_FIX_REPORT.md")

if __name__ == "__main__":
    main()
